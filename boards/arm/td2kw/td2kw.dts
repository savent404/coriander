/*
 * Copyright (c) 2023 Savent Gate
 *
 * SPDX-License-Identifier: All rights reserved
 */
/dts-v1/;
#include <st/f4/stm32f405Xg.dtsi>
#include <st/f4/stm32f405rgtx-pinctrl.dtsi>

/ {

    model = "Savent Gate STM32F405RG TD2KW Board";
    compatible = "st,stm32f405Xg";

	zephyr,user {
		io-channels =  <&adc1 1>, <&adc1 3>, <&adc1 15>, <&adc1 8>,
		/* For phase current */ <&adc2 11>, <&adc2 12>, <&adc2 13>;
		io-channel-names = "adc1-1", "adc1-3", "adc1-15", "adc1-8",
		    "motor_iu", "motor_iv", "motor_iw";
	};
	
    chosen {
		zephyr,sram = &sram0;
		zephyr,flash = &flash0;
		zephyr,code-partition = &slot0_partition;
		usr,led = &leds;
		usr,dbg = &uart5;
		usr,encoder = &qdec;
    };


	leds: leds{
		compatible = "gpio-leds";
		app_led: app_led {
			gpios = <&gpioa 12 GPIO_ACTIVE_LOW>;
			status = "okay";
		};
	};

	fstab {
		compatible = "zephyr,fstab";
		lfs: lfs {
			compatible = "zephyr,fstab,littlefs";
			read-size = <16>;
			prog-size = <16>;
			cache-size = <1024>;
			lookahead-size = <32>;
			block-cycles = <512>;
			partition = <&fs_partition>;
			// no-format = true;
			mount-point = "/fs";
			automount;
		};
	};

	servo: servo {
		compatible = "coriander,bldc";
		pwms = <&pwm 1 PWM_USEC(500) PWM_POLARITY_NORMAL>,
			<&pwm 2 PWM_USEC(500) PWM_POLARITY_NORMAL>,
			<&pwm 3 PWM_USEC(500) PWM_POLARITY_NORMAL>,
			<&pwm 1 PWM_USEC(500) (PWM_POLARITY_NORMAL | STM32_PWM_COMPLEMENTARY)>,
			<&pwm 2 PWM_USEC(500) (PWM_POLARITY_NORMAL | STM32_PWM_COMPLEMENTARY)>,
			<&pwm 3 PWM_USEC(500) (PWM_POLARITY_NORMAL | STM32_PWM_COMPLEMENTARY)>;
		pwm-names = "motor-u", "motor-v", "motor-w", "motor-un", "motor-vn", "motor-wn";
		enable-pin = <&gpioc 7 GPIO_ACTIVE_LOW>;
		max_pulse = <PWM_USEC(490)>;
		min_pulse = <PWM_USEC(10)>;
	};
};

// spi flash
&spi1 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&spi1_miso_pa6 &spi1_mosi_pa7 &spi1_sck_pa5 &spi1_nss_pa4>;
	cs-gpios = <&gpioa 4 GPIO_ACTIVE_LOW>;
	clock-frequency = <24000000>;
	spi_flash: FM25Q16A@0 {
		compatible = "jedec,spi-nor";
		reg = <0>;

		// 16Mbits = 2MBytes
		size = <0x1000000>;
		spi-max-frequency = <24000000>;
		jedec-id = [a1 40 15];
		status = "okay";

		partitions {
			compatible = "fixed-partitions";
			#address-cells = <1>;
			#size-cells = <1>;

			nvs_partition: partition@0 {
				label = "nvs";
				reg = <0x00000000 DT_SIZE_K(16)>;
			};

			fs_partition: partition@100000 {
				label = "littlefs";
				reg = <0x100000 DT_SIZE_M(1)>;
			};
		};
	};
};

// debug console
&uart5 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart5_rx_pd2 &uart5_tx_pc12>;
	current-speed = <115200>;
};

&adc1 {
	status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;

	st,adc-prescaler = <8>;

	pinctrl-0 = <&adc1_in1_pa1 &adc1_in3_pa3 &adc1_in8_pb0 &adc1_in15_pc5>;
	pinctrl-names = "default";

	channel@1 {
		reg = <1>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 144)>;
		zephyr,resolution = <12>;
	};

	channel@3 {
		reg = <3>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 56)>;
		zephyr,resolution = <12>;
	};

	channel@5 {
		reg = <5>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 56)>;
		zephyr,resolution = <12>;
	};

	channel@8 {
		reg = <8>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 56)>;
		zephyr,resolution = <12>;
	};

	channel@15 {
		reg = <15>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 56)>;
		zephyr,resolution = <12>;
	};
};

&adc2 {
	status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;
	st,adc-prescaler = <4>;

	pinctrl-0 = <&adc2_in11_pc1 &adc2_in12_pc2 &adc2_in13_pc3>;
	pinctrl-names = "default";

	channel@11 {
		reg = <11>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 56)>;
		zephyr,resolution = <8>;
	};
	channel@12 {
		reg = <12>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 56)>;
		zephyr,resolution = <8>;
	};
	channel@13 {
		reg = <13>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 56)>;
		zephyr,resolution = <8>;
	};
};

&timers1 {
	status = "okay";

	pwm: pwm {
		status = "okay";
		pinctrl-0 = <&tim1_ch1_pa8 &tim1_ch2_pa9 &tim1_ch3_pa10>;
		pinctrl-names = "default";
	};
};

&timers3 {
	status = "okay";

	encoder_pwm: capture {
		stauts = "okay";
		pinctrl-0 = <&tim3_ch2_pb5>;
		pinctrl-names = "default";
	};
};

&timers4 {
	status = "okay";

	qdec: qdec {
		status = "okay";
		pinctrl-0 = <&tim4_ch1_pb6 &tim4_ch2_pb7>;
		pinctrl-names = "default";
		st,input-filter-level = <3>;
		st,counts-per-revolution = <0x8000>;
	};
};

&clk_lsi {
    status = "okay";
};

&clk_hse {
    hse-bypass;
    clock-frequency = <DT_FREQ_M(8)>;
    status = "okay";
};

&pll {
	div-m = <8>;
	mul-n = <336>;
	div-p = <4>;
	div-q = <7>;
	clocks = <&clk_hse>;
	status = "okay";
};

&rcc {
	clocks = <&pll>;
	clock-frequency = <DT_FREQ_M(84)>;
	ahb-prescaler = <1>;
	apb1-prescaler = <2>;
	apb2-prescaler = <1>;
};

&flash0 {

	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		/**
		 * boot    0x0000'0000  64K
		 * p1      0x0001'0000 448K
		 * p2      0x0008'0000 448K
		 * scratch 0x000F'0000  64K
		 */

		boot_partition: partition@0 {
			label = "mcuboot";
			reg = <0x00000000 DT_SIZE_K(64)>;
			read-only;
		};
		slot0_partition: partition@10000 {
			label = "image-0";
			reg = <0x00010000 DT_SIZE_K(448)>;
		};
		slot1_partition: partition@80000 {
			label = "image-1";
			reg = <0x00080000 DT_SIZE_K(448)>;
		};
		scratch_partition: partition@f0000 {
			label = "image-scratch";
			reg = <0x000f0000 DT_SIZE_K(64)>;
		};
	};
};